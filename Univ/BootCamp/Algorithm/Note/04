2/8(수) Graph


- 상, 하위 구분없이 노드가 이어지는 형태
- 트리에 싸이클이 있는 형태
- 정점, 간선 있음
- 2차원 배열 필요(row, col)

- Graph 종류
  1) 무방향 : 간선에 방향성 없음 {(a, b), (d, a), (c, a)} 대칭
  2) 방향 : 화살표로 간선 표시, 방향성 있음 {<a, b>, <a, c>} <>로 간선 표시, 대칭x
  3) 가중치 Weight : 무방향, 방향

- Adjacency Matrix 인접 행렬
  자기 자신은 전부 0으로 표시 [a][a] = 0
  1) 무방향
  2) 방향

- Graph 구현
  a=1 b=2 c=3 d=4
     a  b  c  d
  a [0, 0, 0, 0]
  b [0, 0, 0, 0]
  c [0, 0, 0, 0]
  d [0, 0, 0, 0]

  1) 정점 생성
     [0 for _ in range(size) for _ in range(size)]

  2) 정점 연결
     G1.graph[0][1] = 1 # (a, b) 간선

  3) 개선
     변수명을 정점 번호로 사용
     G1.graph[incheon][seoul] = 1

     행 & 열 주석 달기
     반복문으로 행렬 출력하기 전에 행 주석 출력
     열 첫 값 출력 전에 열 주석 출력

  4) 깊이 우선 탐색(Stack)
     계속 들어가면서 탐색
     스택에 방문할 노드 집어넣고
     방문이 전부 끝나면 스택이 비어있는것을 기준으로 프로그램 종료
     next로 이동할때 append / 되돌아갈때 pop, current로 되돌아감

  5) 너비 우선 탐색(Queue)


